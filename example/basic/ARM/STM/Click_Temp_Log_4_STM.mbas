'
'Example for Temp_Log_4 Click
'
'    Date          : Dec 2018.
'    Author        : Nemanja Medakovic
'
'Test configuration STM32 :
'    
'    MCU              : STM32F107VCT6
'    Dev. Board       : EasyMx PRO v7 for STM32
'    ARM Compiler ver : v6.0.0.0
'
'---
'
'Description :
'
'The application is composed of three sections :
'
'- System Initialization - Initializes peripherals and pins.
'- Application Initialization - Initializes I2C interface and performs a device configuration for properly working.
'  Also sets the temperature limit to the desired values.
'- Application Task - (code snippet) - First ensures that the minimum conversion time is met, and then reads the
'  ambient temperature calculated to the Celsius degrees.
'  Also checks the limit status and shows a message when some limit condition is met.
'Note : The temperature range that can be measured or written is from -40 to +125 Celsius degrees.
'The resolution of ambient temperature measurement is 11bit, or 0.125 Celsius degrees.
'The limit temperature resolution is always a 10bit, or 0.25 Celsius degrees.
'If user wants to enable the EEPROM Write Protection, the A0 pin on the device must be set to the high voltage level.
'This high voltage level for EEPROM Write Protection must be in range from 7V to 10V, in other cases can be up to VDD.
'
'Additional Functions :
'
'- floatCut - Makes that float values be rounded on two decimal places.
'- logUnit - Writes a Celsius degrees symbol on uart terminal.
'- checkLimitStatus - Checks the limit status for each temperature reading cycle and writes a message on uart terminal
'  when some limit condition is met.
'
'
program Click_Temp_Log_4_STM

include Click_Temp_Log_4_types
include Click_Temp_Log_4_config
dim
    retStatus as T_TEMPLOG4_RETVAL 
    temperature as T_TEMPLOG4_DEG 
    text as char[50] 
    
sub procedure floatCut() 
dim
    count as uint8_t 
    conCnt as uint8_t 
    conVar as uint8_t 
    conCnt = 0
    conVar = 0

    for count = 0 to 50 - 1 
        if (text[count] = ".") then 
            conVar = 1 
        end if
        if (conVar = 1) then 
            inc(conCnt)
        end if
        if (conCnt > 3) then 
            if ((text[count] = "e") or (conVar = 2)) then 
                text[count - (conCnt - 4)] = text[count] 
                text[count] = 0 
                conVar = 2 
            else 
                text[count] = 0 
            end if
        end if
    next count
end sub

sub procedure logUnit() 
    text[0] = " " 
    text[1] = 176 
    text[2] = "C" 
    text[3] = 0 
    mikrobus_logWrite(text, _LOG_TEXT) 
end sub

sub procedure checkLimitStatus() 
    if ((retStatus and _TEMPLOG4_TCRIT_DETECT) <> _TEMPLOG4_OK) then 
        mikrobus_logWrite("**  Critical temperature detection!  **", _LOG_LINE) 
    end if
    if ((retStatus and _TEMPLOG4_TUPPER_DETECT) <> _TEMPLOG4_OK) then 
        mikrobus_logWrite("**  Ambient temperature is higher than upper limit temperature!  **", _LOG_LINE) 
    else 
        if ((retStatus and _TEMPLOG4_TLOWER_DETECT) <> _TEMPLOG4_OK) then 
            mikrobus_logWrite("**  Ambient temperature is lower than lower limit temperature!  **", _LOG_LINE) 
        end if
    end if
end sub

sub procedure systemInit() 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_INT_PIN, _GPIO_INPUT) 
    mikrobus_i2cInit(_MIKROBUS1, @_TEMPLOG4_I2C_CFG[0]) 
    mikrobus_logInit(_LOG_USBUART_A, 9600) 
    mikrobus_logWrite("*** Initializing... ***", _LOG_LINE) 
    Delay_ms(100) 
end sub

sub procedure applicationInit() 
    templog4_i2cDriverInit(T_TEMPLOG4_P(@_MIKROBUS1_GPIO), T_TEMPLOG4_P(@_MIKROBUS1_I2C), _TEMPLOG4_SLAVE_ADDR_A0_L) 
    Delay_ms(500) 
    templog4_writeReg(_TEMPLOG4_CONFIG_REG, ((((_TEMPLOG4_TLIMIT_HYST_0_DEG or _TEMPLOG4_CONT_CONV_MODE) or _TEMPLOG4_EVENT_OUTPUT_EN) or _TEMPLOG4_EVENT_TCRIT_ONLY) or _TEMPLOG4_EVENT_POL_ACT_HIGH) or _TEMPLOG4_EVENT_COMPARATOR_MODE) 
    templog4_setTemp(_TEMPLOG4_TEMP_CRITICAL_REG, 28.5) 
    templog4_setTemp(_TEMPLOG4_TEMP_UPPER_REG, 40.250) 
    templog4_setTemp(_TEMPLOG4_TEMP_LOWER_REG, -5) 
    Delay_ms(200) 
    mikrobus_logWrite("** Temp-Log 4 is initialized **", _LOG_LINE) 
    mikrobus_logWrite("", _LOG_LINE) 
end sub

sub procedure applicationTask() 
    templog4_waitConvDone() 
    retStatus = templog4_getTemp(_TEMPLOG4_TEMP_AMBIENT_REG, @temperature) 
    FloatToStr(temperature, text) 
    floatCut() 
    mikrobus_logWrite("**  Ambient temperature is : ", _LOG_TEXT) 
    mikrobus_logWrite(text, _LOG_TEXT) 
    logUnit() 
    mikrobus_logWrite("  **", _LOG_LINE) 
    checkLimitStatus() 
    Delay_ms(300) 
end sub

main :

    systemInit() 
    applicationInit() 
    while (1) 
        applicationTask() 
    wend
end.